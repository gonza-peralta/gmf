expression := *top* &
 [ HEAD pos,
   VAL val-cat ].

word := expression &
 [ ORTH string ].

;;; POS tagging
;;; ===========
pos := *top*.
prep := pos.
adv := pos.
conj := pos.

agr-pos := pos &
 [ AGR agr-cat ].

agr-pos-p := agr-pos &
 [ AGR agr-cat-p ].

verb := agr-pos-p.

agr-pos-pg := agr-pos &
 [ AGR agr-cat-pg ].

noun := agr-pos-pg.

det := agr-pos-pg. 

agr-pos-g := agr-pos &
 [ AGR agr-cat-g ].

adj := agr-pos-g.

;;; Agreement
;;; =========

agr-cat := *top* &
 [ NUM num-cat ].

agr-cat-p := agr-cat &
 [ PER per-cat ].

agr-cat-g := agr-cat &
 [ GEN gen-cat ].

agr-cat-pg := agr-cat-p & agr-cat-g.

num-cat := *top*.
sg := num-cat.
pl := num-cat.

per-cat := *top*.
pri := per-cat.
seg := per-cat.
ter := per-cat.

gen-cat := *top*.
ma := gen-cat.
fe := gen-cat.

val-cat := *top* &
 [ SPR *list*,
   COMPS *list*,
   MOD *list* ].

;;; PHRASE DEFINITION
;;; =================
phrase := expression &
 [ VAL [ COMPS <> ],
   ARGS *list* ].

phrase-np := phrase & 
 [ HEAD noun,
   VAL [ SPR <>, COMPS <> ] ]. 

phrase-vp := phrase & 
 [ HEAD verb, 
   VAL [ SPR < [] >, COMPS <> ] ].

phrase-pp := phrase & 
 [ HEAD prep, 
   VAL [ SPR <>, COMPS <> ] ].

phrase-adv := phrase &
 [ HEAD adv,
   VAL [ SPR <>, COMPS <> ] ].

;;; Lexical values
;;; ==============

;;; Lexical det
;;; ===========
lexical-det := word &
[ HEAD det,
  VAL [ SPR <>,
        COMPS <>,
	MOD <> ] ].

sg-ter-ma-det := lexical-det &
[ HEAD [ AGR [ NUM sg,
               PER ter,
               GEN ma ] ] ].

pl-ter-ma-det := lexical-det &
[ HEAD [ AGR [ NUM pl,
               PER ter,
               GEN ma ] ] ].

sg-ter-fe-det := lexical-det &
[ HEAD [ AGR [ NUM sg,
               PER ter,
               GEN fe ] ] ].

pl-ter-fe-det := lexical-det &
[ HEAD [ AGR [ NUM pl,
               PER ter,
               GEN fe ] ] ].

sg-pri-fe-det := lexical-det &
[ HEAD [ AGR [NUM sg,
              PER pri,
              GEN fe ] ] ]. 

;;; Lexical noun
;;; ============
lexical-noun := word &
[ HEAD noun & [ AGR [ NUM #agrnum,
                      GEN #agrgen] ],
  VAL [ SPR < [ HEAD det & [ AGR [ NUM #agrnum,
                                   GEN #agrgen] ] ] >,
        MOD <> ] ].

lexical-noun-sincomp := lexical-noun &
[ VAL [ COMPS <>] ].

noun-pl := lexical-noun-sincomp &
[ HEAD.AGR.NUM pl].

noun-pl-ma := noun-pl &
[ HEAD.AGR.GEN ma].
noun-pl-fe := noun-pl &
[ HEAD.AGR.GEN fe].

noun-sg := lexical-noun-sincomp &
[ HEAD.AGR.NUM sg].

noun-sg-ma := noun-sg &
[ HEAD.AGR.GEN ma].
noun-sg-fe := noun-sg &
[ HEAD.AGR.GEN fe].

lexical-nomprop := word &
[ HEAD noun,
  VAL [ SPR <>,
        COMPS <> ] ].

pro-noun := word &
[ HEAD noun,
  VAL [ SPR <>,
        COMPS <> ] ].
pro-noun-sg-ter := pro-noun &
[ HEAD.AGR.NUM sg ] &
[ HEAD.AGR.PER ter ].

lexical-noun-comp := lexical-noun &
[ VAL [ COMPS <phrase-pp> ] ].

noun-comp-sg := lexical-noun-comp &
[ HEAD.AGR.NUM sg].

noun-comp-sg-ma := noun-comp-sg &
[ HEAD.AGR.GEN ma].
noun-comp-sg-fe := noun-comp-sg &
[ HEAD.AGR.GEN fe].

;;; Lexical verb
;;; ============
lexical-verb := word & 
[ HEAD verb & [ AGR [ NUM #agrnum,
                      PER #agrper ] ],
  VAL [ SPR < [ HEAD noun & [ AGR [ NUM #agrnum,
                                    PER #agrper ] ] ] >,
	MOD <> ] ].

transitive-verb-np := lexical-verb &
[ VAL [ COMPS < phrase-np > ] ].

transitive-verb-np-pl := transitive-verb-np &
[ HEAD.AGR.NUM pl].

transitive-verb-np-sg := transitive-verb-np &
[ HEAD.AGR.NUM sg].

transitive-verb-pp := lexical-verb &
[ VAL [ COMPS < phrase-pp > ] ].

transitive-verb-pp-pl := transitive-verb-pp &
[ HEAD.AGR.NUM pl].
transitive-verb-pp-sg := transitive-verb-pp &
[ HEAD.AGR.NUM sg].
transitive-verb-pp-sg-ma := transitive-verb-pp-sg &
[ HEAD.AGR.GEN ma].
transitive-verb-pp-sg-ma-ter := transitive-verb-pp-sg-ma &
[ HEAD.AGR.PER ter].

;;;participio-verb-pp := lexical-verb &
;;;[ VAL [ COMPS < phrase-pp > ] ].
;;;participio-verb-pp-pl := participio-verb-pp &
;;;[ HEAD.AGR.NUM pl].


ditransnp-verb := lexical-verb &
[ VAL [ COMPS < phrase-np, phrase-np > ] ].

ditranspp-verb := lexical-verb &
[ VAL [ COMPS < phrase-np, phrase-pp > ] ].

ditranspp-verb-pl := ditranspp-verb &
[ HEAD.AGR.NUM pl]. 
ditranspp-verb-pl-ma := ditranspp-verb-pl &
[ HEAD.AGR.GEN ma].
ditranspp-verb-pl-fe := ditranspp-verb-pl &
[ HEAD.AGR.GEN fe].

ditranspp-verb-sg := ditranspp-verb &
[ HEAD.AGR.NUM sg].
ditranspp-verb-sg-ma := ditranspp-verb-sg &
[ HEAD.AGR.GEN ma].
ditranspp-verb-sg-fe := ditranspp-verb-sg &
[ HEAD.AGR.GEN fe].

ditranspp-verb-nomprop := lexical-verb &
[ VAL [ COMPS < [ HEAD noun], phrase-pp > ] ].
ditranspp-verb-nomprop-pl := ditranspp-verb-nomprop &
[ HEAD.AGR.NUM pl]. 
ditranspp-verb-nomprop-pl-ter := ditranspp-verb-nomprop-pl &
[ HEAD.AGR.PER ter].


ditranspp-pp-verb := lexical-verb &
[ VAL [ COMPS < phrase-pp, phrase-pp > ] ].
ditranspp-pp-verb-pl := ditranspp-pp-verb &
[ HEAD.AGR.NUM pl].
ditranspp-pp-verb-sg := ditranspp-pp-verb &
[ HEAD.AGR.NUM sg].

;;; Para voz pasiva
;;; ===============
passintransitive-verb := lexical-verb &
[ VAL [ COMPS < phrase-pp > ] ].

passintransitive-verb-pl := passintransitive-verb &
[ HEAD.AGR.NUM pl].
passintransitive-verb-pl-ma := passintransitive-verb-pl &
[ HEAD.AGR.GEN ma].
passintransitive-verb-pl-fe := passintransitive-verb-pl &
[ HEAD.AGR.GEN fe].

passintransitive-verb-sg := passintransitive-verb &
[ HEAD.AGR.NUM sg].
passintransitive-verb-sg-ma := passintransitive-verb-sg &
[ HEAD.AGR.GEN ma].
passintransitive-verb-sg-fe := passintransitive-verb-sg &
[ HEAD.AGR.GEN fe].

passintransitive-verb-pp := lexical-verb &
[ VAL [ COMPS < phrase-pp, phrase-pp > ] ].
passintransitive-verb-pp-pl := passintransitive-verb-pp &
[ HEAD.AGR.NUM pl].
passintransitive-verb-pp-pl-ma := passintransitive-verb-pp-pl &
[ HEAD.AGR.GEN ma].
passintransitive-verb-pp-sg := passintransitive-verb-pp &
[ HEAD.AGR.NUM sg].
passintransitive-verb-pp-sg-ma := passintransitive-verb-pp-sg &
[ HEAD.AGR.GEN ma].



;;;passbe-verb := word &
;;;[ HEAD verb & [ AGR [ NUM #agrnum,
;;;		      PER #agrper ] ],
;;;  VAL [ SPR < [ HEAD noun & [ AGR [ NUM #agrnum,
;;;				    PER #agrper ] ] ] >,
;;;	COMPS < phrase-vp & [ HEAD verb & 
;;;				[ AGR [ NUM #agrnum, 
;;;					PER #agrper] ] ] >,
;;;	MOD <> ] ].
;;;
passbe-verb := lexical-verb &
[ HEAD verb & [ AGR [ NUM #agrnum,
		      PER #agrper ] ],
  VAL [ COMPS < phrase-vp & [ HEAD verb & 
				[ AGR [ NUM #agrnum, 
					PER #agrper] ] ] > ] ].


passbe-verb-pl := passbe-verb &
[ HEAD.AGR.NUM pl].
passbe-verb-pl-ma := passbe-verb-pl &
[ HEAD.AGR.GEN ma].
passbe-verb-pl-fe := passbe-verb-pl &
[ HEAD.AGR.GEN fe].

passbe-verb-sg := passbe-verb &
[ HEAD.AGR.NUM sg].
passbe-verb-sg-ma := passbe-verb-sg &
[ HEAD.AGR.GEN ma].
passbe-verb-sg-fe := passbe-verb-sg &
[ HEAD.AGR.GEN fe].
                         
;;; Lexical prep
;;; ============
lexical-prep := word &
[ HEAD prep,
  VAL [ SPR <>,
        COMPS < [ HEAD noun,
                  VAL [ SPR <>, COMPS <> ] ] >,
	    MOD <> ] ].

;;; Lexical conjunction
;;; ===================
lexical-conj := word &
[ HEAD conj, 
  VAL [ SPR <>,
        COMPS <>, 
	MOD <> ] ].

;;; Lexical adv
;;; ===========
lexical-adv-verb := word &
[ HEAD adv, 
  VAL [ MOD < [ HEAD verb,
                VAL [ SPR <[]>,
                      COMPS <> ] ] >,
        SPR <>,
        COMPS <> ] ].

lexical-adv-adj := word &
[ HEAD adv, 
  VAL [ MOD < [ HEAD adj ] >,
        SPR <>,
        COMPS <> ] ].

;;; Lexical adj
;;; ===========
lexical-adj := word &
[ HEAD adj & [ AGR [ NUM #agrnum,
		             GEN #agrgen] ], 
  VAL [ MOD < [ HEAD noun & 
                     [AGR [ NUM #agrnum,
			    GEN #agrgen ] ],
                      VAL [ SPR <[]>, COMPS <> ] ] >,
        SPR <>,
        COMPS <> ] ].

lexical-adj-pl := lexical-adj &
[ HEAD.AGR.NUM pl].

lexical-adj-pl-ma := lexical-adj-pl &
[ HEAD.AGR.GEN ma].

lexical-adj-pl-fe := lexical-adj-pl &
[ HEAD.AGR.GEN fe].

lexical-adj-sg := lexical-adj &
[ HEAD.AGR.NUM sg].

lexical-adj-sg-ma := lexical-adj-sg &
[ HEAD.AGR.GEN ma].

lexical-adj-sg-fe := lexical-adj-sg &
[ HEAD.AGR.GEN fe].


;; standard types
;;; ==============
string := *top*.

*list* := *top*.

*ne-list* := *list* &
 [ FIRST *top*,
   REST *list* ].

*null* := *list*.

